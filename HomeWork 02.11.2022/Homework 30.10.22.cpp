
/*  Посчитать сумму `S = 1 * 2 + 2 * 3 * 4 + 3 * 4 * 5 * 6 + 4 * 5 * 6 * 7 * 8 + ....` до N(натурального числа).
	Напечатать в консоли равнобедренный треугольник из звездочек (`*`) с вершиной, направленной вверх, и основанием N, где N — натуральное нечетное число больше 3.
	
	Напечатать заполненный прямоугольный равнобедренный треугольник из `*` со сторонами катетов, равными N, и прямым углом справа снизу. где N — натуральное число больше 2.
	
	Напечатать заполненный прямоугольный равнобедренный треугольник из `*` со сторонами катетов, равными N, и прямым углом справа сверху. где N — натуральное число больше 2.

	Напечатать квадрат из N звездочек. Реализовать все три варианта.
 А) В котором ВСЕГО N звездочек.
 Б) Заполненный квадрат со стороной N.
 В) Пустой квадрат со стороной N. В каждом из вариантов задать требования к минимальному N.

	Напечатать прямоугольный равнобедренный треугольник со сторонами катетов, равными N, и прямым углом слева, где N — натуральное число больше 2.

	Построить пустой куб из звездочек.	*/

#include <iostream>

using namespace std;

double z1(int N) // Задание 2.3 (Умножение)
{
	int i, j, result = 0, pr;
	for (i = 1; i <= N; i++)
	{
		pr = 1;
		for (j = 0; j <= i; j++)
		{
			pr *= (i+j);
		}
		result += pr;
	}
	return result;
}


double z2(int N) // Задание 2.4 (Р/Б треугольник, заполненный и нет)
{
	int i, j, pr = N / 2;
	cout << "Заполненный" << endl;
	for (i = 1; i <= N / 2 + 1; i++)
	{
		for (j = 0; j <= pr; j++) // Делаю на 1 пробел больше, чтобы был отступ от края консоли
		{
			cout << "  ";
		}
		if ((i != 1) && (i != N / 2 + 1))
		{
			cout << " *";
				for (j = 1; j <= i * 2 - 3; j++)
				{
					cout << "  ";
				}
			cout << " *";
		}

		else if (i == 1)
		{
			cout << " *";

		}

		else {
			for (j = 1; j <= i * 2 - 1; j++)
			{
				cout << " *";
			}
		}
		pr--;
		cout << endl;
	}

	cout << endl;
	cout << endl;
	cout << "Незаполненный" << endl;

	pr = N / 2;

	for (i = 1; i <= N / 2 + 1; i++)
	{
		for (j = 0; j <= pr; j++) // Делаю на 1 пробел больше, чтобы был отступ от края консоли
		{
			cout << "  ";
		}
		for (j = 1; j <= i * 2 - 1; j++)
		{
			cout << " *";
		}
			pr--;
		cout << endl;
	}

	cout << endl;
	cout << "Построен равнобедренный треугольник с основанием, равным ";
	return N;
}

 
double z3(int N) // Задание 2.5 (П/У треугольник с права снизу углом)
{
	int i, j, pr = N - 1;
	for (i = 1; i <= N; i++)
	{
		for (j = 0; j <= pr; j++)
		{
			cout << "  "; // Фокус (убрать пробел, получится 2.4 почти) 
		}
		for (j = 1; j <= i; j++)
		{
			cout << "* ";
		}
		cout << endl;
		pr--;
	}
	cout << endl;
	cout << "Построен равнобедренный прямоугольный треугольник с прямым углом справа снизу и сторонами катетов, равными ";
	return N;
}


double z4(int N) // Задание 2.6 (П/У треугольник с права сверху углом)
{
	int i, j, pr = 0;
	for (i = N; i >= 1; i--) // Поменять циклы внутри местами, получится слева сверху
	{
		for (j = 0; j <= pr; j++)
		{
			cout << "  ";
		}

		for (j = 1; j <= i; j++)
		{
			cout << "* ";
		}
		pr++;
		cout << endl;
	}
	cout << endl;
	cout << "Построен равнобедренный прямоугольный треугольник с прямым углом справа сверху и сторонами катетов, равными ";
	return N;
}


double z5(int N, int a) // Задание 2.7 (Квадрат в котором N звездочек)
{
	int i, j;
	for (i = 1; i <= a; i++)
	{
		cout << "  ";
		for(j = 1; j <= a; j++)
		{
			cout << "* ";
		}
		cout << endl;
	}
	cout << endl;
	cout << "Построен квадрат со стороной ";
	return a;
}


double z6(int N) // Задание 2.7 (Квадрат со стороной N)
{
	int i, j;
	for (i = 1; i <= N; i++)
	{
		cout << "  ";
		for (j = 1; j <= N; j++)
		{
			cout << "* ";
		}
		cout << endl;
	}
	cout << "Построен квадрат со стороной ";
	return N;
}


double z7(int N) // Задание 2.7 (Квадрат со стороной N, незаполненный)
{
	int i, j;
	cout << "  ";
	for (j = 1; j <= N; j++) // Первая строка
	{
		cout << "* ";
	}
	cout << endl;

	for (i = 1; i <= N - 2; i++)
	{
		cout << "  *";
		for (j = 1; j <= N - 2; j++)
		{
			cout << "  ";
		}		
		cout << " *";
		cout << endl;
	}

	cout << "  ";
	for (j = 1; j <= N; j++) // Последняя строка
	{
		cout << "* ";
	}
	cout << endl;

	cout << "Построен незаполненный квадрат со стороной ";
	return N;
}


double z8(int N) // Задание 2.8 (П/У треугольник с катетом N и углом слева
{
	cout << "Слева сверху, заполненный" << endl;
	int i, j, pr;

	for (i = N; i >= 1; i--)
	{
		for (j = 1; j <= i; j++)
		{
			cout << "* ";
		}
		cout << endl;
	}


	cout << endl;
	cout << endl;
	cout << "Слева сверху, незаполненный" << endl;


	for (j = 1; j <= N; j++) // Первая строка
	{
		cout << "* ";
	}
	cout << endl;

	pr = N - 4; // -4, потому что так надо, получилось, если смотреть наглядно
	for (i = N - 2; i >= 1; i--)
	{
		cout << "* ";
		for (j = 0; j <= pr; j++)
		{
			cout << "  ";
		}
		cout << "* ";
		pr--;
		cout << endl;
	}

	cout << "*" << endl; // Последняя строка


	cout << endl;
	cout << endl;
	cout << "Слева снизу, незаполненный" << endl;


	cout << "*" << endl; // Первая строка
	pr = 0;
	for (i = 1; i <= N-2; i++) // -2, потому что 2 строчки уходят на первую и последнюю
	{
		cout << "* ";
		for (j = 1; j <= pr; j++)
		{
			cout << "  ";
		}
		pr++;
		cout << "* " << endl;
	}

	for (j = 1; j <= N; j++) // Последняя строка
	{
		cout << "* ";
	}
	cout << endl;


	cout << endl;
	cout << endl;
	cout << "Слева снизу, заполненный" << endl;


	for (i = 1; i <= N; i++)
	{
		for (j = 1; j <= i; j++)
		{
			cout << "* ";
		}
		cout << endl;
	}


	cout << endl;
	cout << "Построены 4 прямоугольных треугольника с катетом, равным ";
	return N;
}


double z9(int N) // Куб
{
	int i, j, c, pr, pr2 = -1;
	pr = (N + 1) / 2 - 1; // Потом поднять
	//cout << endl;
	//cout <<  << endl;
	//cout << endl;
	for (j = 1; j <= (N + 1) / 2 - 1; j++) // Часть до основного квадрата
	{
		for (c = 1; c <= pr; c++) // пробелы до всех звездочек
		{
			cout << "  ";
		}
		if (j == 1)
		{
			for (c = 1; c <= N; c++)
			{
				cout << "* ";
			}
		}

		else {
			cout << "* ";
			for (c = 1; c <= N - 2; c++) // Пробелы внутри верхней части куба
			{
				cout << "  ";
			}
			cout << "* ";
			for (c = 1; c <= pr2; c++) // Пробелы внутри правой части куба
			{
				cout << "  ";
			}
			cout << "* ";
		}
		pr--;
		pr2++;
		cout << endl;
	}

	for (i = 1; i <= N - 1; i++) // Часть с основного квадрата
	{
		if (i == 1)
		{
			for (j = 1; j <= N; j++)
			{
				cout << "* ";
			}
			for (j = 1; j <= ((N + 1) / 2) - 2; j++)
			{
				cout << "  ";
			}
			cout << "* " << endl;
		}

		else {
			cout << "* ";
			for (j = 1; j <= N - 2; j++)
			{
				cout << "  ";
			}
			cout << "* ";

			if (i <= (N / 2 + 1))
			{
				for (j = 1; j <= (N + 1) / 2 - 2; j++)
				{
					cout << "  ";
				}
				cout << "* " << endl;
			}

			else {
				pr2--;
				for (j = 1; j <= pr2; j++)
				{
					cout << "  ";
				}
				cout << "* " << endl;
			}
		}
	}

	for (i = 1; i <= N; i++)
	{
		cout << "* ";
	}

	cout << endl;
	cout << "Построен куб со стороной, равной ";
	return N;
}


int main()
{
	setlocale(LC_ALL, "Russian");
	int N, a;
	
	cout << "Задание 2.3" << endl;
	do {
		cout << "N = ";
		cin >> N;
	} while (N <= 1);
	cout << endl;
	cout << z1(N) << endl;
	cout << endl;
	
	
	cout << "Задание 2.4" << endl;
	cout << "Введите длину основания (натуральное нечётное число больше 3)" << endl;
	do {
		cout << "N = ";
		cin >> N;
	} while ((N % 2 == 0) || (N < 5));

	cout << endl;
	cout << z2(N) << endl;
	cout << endl;

	
	cout << "Задание 2.5" << endl;
	cout << "Введите длину катета (больше 2)" << endl;
	do {
		cout << "N = ";
		cin >> N;
	} while (N < 3);

	cout << endl;
	cout << z3(N) << endl;
	cout << endl;


	cout << "Задание 2.6" << endl;
	cout << "Введите длину катета (больше 2)" << endl;
	do {
		cout << "N = ";
		cin >> N;
	} while (N < 3);

	cout << endl;
	cout << z4(N) << endl;
	cout << endl;


	cout << "Задание 2.7 (A)" << endl;
	cout << "Введите количество звёздочек (должен быть квадрат какого-либо числа)" << endl; // Надо больше 4, 2, 3 по заданиям, я в 1 вкинул, мне впадлу много делать
	do {
		cout << "N = ";
		cin >> N;
		a = sqrt(N);
	} while (a * a != N);

	cout << endl;
	cout << z5(N, a) << endl;
	cout << endl;


	cout << "Задание 2.7 (Б)" << endl;
	cout << "Введите длину стороны" << endl;
	do {
		cout << "N = ";
		cin >> N;
	} while (N<2);

	cout << endl;
	cout << z6(N) << endl;
	cout << endl;


	cout << "Задание 2.7 (В)" << endl;
	cout << "Введите длину стороны" << endl;
	do {
		cout << "N = ";
		cin >> N;
	} while (N < 2);

	cout << endl;
	cout << z7(N) << endl;
	cout << endl;


	cout << "Задание 2.8" << endl;
	cout << "Введите длину катета (больше 2)" << endl;
	do {
		cout << "N = ";
		cin >> N;
	} while (N < 3);

	cout << endl;
	cout << z8(N) << endl;
	cout << endl;

	
	cout << "Задание 2.9" << endl;
	cout << "Введите сторону квадрата (больше 4)" << endl;
	do {
		cout << "N = ";
		cin >> N;
	} while (N < 5);

	cout << endl;
	cout << z9(N) << endl;
	cout << endl;


	return 0;
}